# MLTSHP.com production config

worker_processes auto;

worker_rlimit_nofile 20480;

events {
    worker_connections 20480;
    use epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    upstream frontends {
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
        server 127.0.0.1:8004;
        server 127.0.0.1:8005;
        server 127.0.0.1:8006;
    }

    sendfile on;
    proxy_read_timeout 200;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml
               image/svg+xml
               application/x-javascript application/xml
               application/atom+xml text/javascript;

    # caches information about file descriptors, frequently accessed files
    open_file_cache max=20000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Allow server to close connections for timeouts
    reset_timedout_connection on;

    # limits time for body response to 30s (default is 60)
    client_body_timeout 30;

    # timesout if the client stops responding (default 60)
    send_timeout 20;

    # close keepalive connections after 30s (default 75)
    keepalive_timeout 30;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error timeout;

    resolver 8.8.8.8;

    # Supply a default server that returns a 444 page in
    # case there's no server_name match
    server {
        listen 80 default_server;
        return 444;
    }

    server {
        listen 80;
        server_name mltshp.com www.mltshp.com s.mltshp.com mltshp-cdn.com;

        # Allow file uploads
        client_max_body_size 20M;

        if ($host = 'www.mltshp.com' ) {
           rewrite  ^/(.*)$  $scheme://mltshp.com/$1  permanent;
        }

        # Serve a static error page in case the app is offline
        error_page  502 503 504  /static/50x.html;

        location = /r/([a-zA-Z0-9\.]+) {
            proxy_pass_header Surrogate-Control;
            valid_referers none blocked www.mltshp.com mltshp.com;
            if ($invalid_referer) {
                return 403;
            }
        }

        location = /upload {
            # Pass altered request body to this location
            upload_pass /internal/upload;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store /mnt/tmpuploads 1;

            # Allow uploaded files to be read only by user
            upload_store_access all:rw;

            # Set specified fields in request body
            upload_set_form_field "${upload_field_name}_name" "$upload_file_name";
            upload_set_form_field "${upload_field_name}_content_type" "$upload_content_type";
            upload_set_form_field "${upload_field_name}_path" "$upload_tmp_path";

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "${upload_field_name}_sha1" "$upload_file_sha1";
            upload_aggregate_form_field "${upload_field_name}_size" "$upload_file_size";

            upload_pass_form_field "_xsrf";
            upload_pass_form_field "message";
            upload_pass_form_field "shake_id";

            upload_cleanup 400 404 499 500-505;
        }

        location ~* ^/shake/([a-zA-Z0-9\-]+)/update {
            upload_pass /internal/shake/update;
            upload_store /mnt/tmpuploads 1;
            upload_store_access all:rw;
            upload_set_form_field "${upload_field_name}_name" "$upload_file_name";
            upload_set_form_field "${upload_field_name}_content_type" "$upload_content_type";
            upload_set_form_field "${upload_field_name}_path" "$upload_tmp_path";
            upload_aggregate_form_field "${upload_field_name}_sha1" "$upload_file_sha1";
            upload_aggregate_form_field "${upload_field_name}_size" "$upload_file_size";

            upload_set_form_field "shake_name" "$1";
            upload_pass_form_field "_xsrf";
            upload_pass_form_field "title";
            upload_pass_form_field "alt_text";
            upload_pass_form_field "description";
            upload_cleanup 400 404 499 500-505;
        }

        location = /account/settings/profile/save {
            upload_pass /internal/account/settings/profile/save;
            upload_store /mnt/tmpuploads 1;
            upload_store_access all:rw;
            upload_set_form_field "${upload_field_name}_name" "$upload_file_name";
            upload_set_form_field "${upload_field_name}_content_type" "$upload_content_type";
            upload_set_form_field "${upload_field_name}_path" "$upload_tmp_path";
            upload_aggregate_form_field "${upload_field_name}_sha1" "$upload_file_sha1";
            upload_aggregate_form_field "${upload_field_name}_size" "$upload_file_size";

            upload_pass_form_field "_xsrf";
            upload_pass_form_field "full_name";
            upload_pass_form_field "about";
            upload_pass_form_field "website";
            upload_cleanup 400 404 499 500-505;
        }

        location = /api/upload {
            upload_pass /internal/api/upload;
            upload_store /mnt/tmpuploads 1;
            upload_store_access all:rw;

            upload_set_form_field "${upload_field_name}_name" "$upload_file_name";
            upload_set_form_field "${upload_field_name}_content_type" "$upload_content_type";
            upload_set_form_field "${upload_field_name}_path" "$upload_tmp_path";

            upload_aggregate_form_field "${upload_field_name}_sha1" "$upload_file_sha1";
            upload_aggregate_form_field "${upload_field_name}_size" "$upload_file_size";
            upload_pass_form_field "title";
            upload_pass_form_field "alt_text";
            upload_pass_form_field "description";
            upload_pass_form_field "shake_id";

            upload_cleanup 400 404 499 500-505;
        }

        location ^~ /static/ {
            root /srv/mltshp.com/mltshp;
            if ($query_string) {
                expires max;
            }
        }

        location = /favicon.ico {
            rewrite (.*) /static/favicon.ico;
        }

        location = /robots.txt {
            rewrite (.*) /static/robots.txt;
        }

        location = /ai.txt {
            rewrite (.*) /static/ai.txt;
        }

        location = /s3/(.*) {
            rewrite ^/s3/(.*)$ /$1 break;
            rewrite (.*) https://mltshp-cdn.com/$1 permanent;
        }

        # For Linode Longview
        location /stub_status {
            stub_status on;
            allow 172.17.0.1;
            deny all;
        }

        location / {
            proxy_pass_header Server;
            proxy_pass_header Surrogate-Control;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://frontends;
        }
    }

    log_format json_analytics escape=json '{'
        '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
        '"connection": "$connection", ' # connection serial number
        '"connection_requests": "$connection_requests", ' # number of requests made in connection
        '"pid": "$pid", ' # process pid
        '"request_id": "$request_id", ' # the unique request id
        '"request_length": "$request_length", ' # request length (including headers and body)
        '"remote_addr": "$http_fastly_client_anon_ip", ' # client IP (Fastly's Anonymized IP)
        '"remote_user": "$remote_user", ' # client HTTP username
        '"remote_port": "$remote_port", ' # client port
        '"time_local": "$time_local", '
        '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
        '"request": "$request", ' # full path no arguments if the request
        '"request_uri": "$request_uri", ' # full path and arguments if the request
        '"args": "$args", ' # args
        '"status": "$status", ' # response status code
        '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
        '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
        '"http_referer": "$http_referer", ' # HTTP referer
        '"http_user_agent": "$http_user_agent", ' # user agent
        '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
        '"http_host": "$http_host", ' # the request Host: header
        '"server_name": "$server_name", ' # the name of the vhost serving the request
        '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
        '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
        '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
        '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
        '"upstream_response_time": "$upstream_response_time", ' # time spent receiving upstream body
        '"upstream_response_length": "$upstream_response_length", ' # upstream response length
        '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
        '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
        '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
        '"scheme": "$scheme", ' # http or https
        '"request_method": "$request_method", ' # request method
        '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
        '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
        '"gzip_ratio": "$gzip_ratio"'
        #'"geoip_country_code": "$geoip_country_code"'
        '}';

    #geoip_country /etc/nginx/GeoLite2-Country.mmdb {
    #    $geoip_country_code default=US source=$http_fastly_client_anon_ip country iso_code;
    #}

    access_log /srv/mltshp.com/logs/nginx_json_access.log json_analytics;
}
